from flask import Flask, render_template, request, redirect, url_for, flash, session
import sys
import os
import re
import time
from urllib.parse import unquote
from admin_auth import admin_required, is_admin
from config.settings import BOT_NAME, BOT_TOKEN

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from database import (create_user_db, get_user_by_telegram_id_db, is_username_taken_db,
                     create_tournament_db, get_tournaments_db, get_tournament_participants,
                     add_tournament_participant, delete_tournament_db, update_tournament_db,
                     update_tournament_password_db, update_lobby_codes_db, get_tournament_with_lobby_db,
                     calculate_prize_distribution, get_user_balance, get_user_bonus_balance, update_user_balance, 
                     add_transaction, process_tournament_payment_from_balance, get_all_users_count, get_all_users_for_admin, get_user_by_username, update_user_bonus_balance, add_fake_participants_for_test)

app = Flask(__name__)
app.secret_key = 'your-secret-key-here'

# –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
BOT_USERNAME = "garantgameproject_bot"  # –ó–ê–ú–ï–ù–ò –ù–ê –†–ï–ê–õ–¨–ù–´–ô USERNAME –ë–û–¢–ê

def send_lobby_codes_notifications(tournament_id, tournament_name, lobby_id, lobby_code):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ–¥–∞—Ö –ª–æ–±–±–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
    try:
        import requests
        from config.settings import BOT_TOKEN
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = get_tournament_participants(tournament_id)
        
        for participant in participants:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
            import sqlite3
            DB_PATH = os.path.join(os.path.dirname(__file__), '..', 'garantgame.db')
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            
            cursor.execute('SELECT telegram_id FROM users WHERE unique_username = ?', (participant['username'],))
            result = cursor.fetchone()
            conn.close()
            
            if not result:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω telegram_id –¥–ª—è {participant['username']}")
                continue
                
            telegram_id = result[0]
            
            codes_text = ""
            if lobby_id:
                codes_text += f"üÜî <b>ID –õ–æ–±–±–∏:</b> <code>{lobby_id}</code>\n"
            if lobby_code:
                codes_text += f"üîë <b>–ö–æ–¥ –õ–æ–±–±–∏:</b> <code>{lobby_code}</code>\n"
            
            message = f"""üéÆ <b>–ö–û–î–´ –õ–û–ë–ë–ò –í–´–î–ê–ù–´!</b>

üèÜ –¢—É—Ä–Ω–∏—Ä: <b>{tournament_name}</b>

{codes_text}
–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –∏–≥—Ä—É! –£–¥–∞—á–∏! üçÄ"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            data = {
                'chat_id': telegram_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, data=data)
            if response.status_code == 200:
                print(f"‚úÖ –ö–æ–¥—ã –ª–æ–±–±–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫—É: {participant['username']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {participant['username']}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ–¥–∞—Ö: {e}")

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    user = session.get('user')
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram, –Ω–æ –Ω–µ —Å–æ–∑–¥–∞–ª –ø—Ä–æ—Ñ–∏–ª—å
    if user and not user.get('profile_created'):
        return redirect(url_for('create_profile'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user and user.get('profile_created'):
        # –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
        tournaments = get_tournaments_db(user_username=user['unique_username'])
    else:
        # –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ
        tournaments = get_tournaments_db(tournament_type='public')
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    user_balance = 0
    user_bonus_balance = 0
    if user and user.get('profile_created'):
        user_balance = get_user_balance(int(user['id']))
        user_bonus_balance = get_user_bonus_balance(int(user['id']))
    
    telegram_widget = create_telegram_login_widget(BOT_USERNAME)
    return render_template('index.html', tournaments=tournaments, bot_name=BOT_NAME, 
                         user=user, telegram_widget=telegram_widget, 
                         user_balance=user_balance, user_bonus_balance=user_bonus_balance)
                
@app.route('/create_tournament_page')
def create_tournament_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        flash('–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    user_balance = get_user_balance(int(user['id']))
    user_bonus_balance = get_user_bonus_balance(int(user['id']))
    
    return render_template('create_tournament.html', bot_name=BOT_NAME, user=user, 
                         user_balance=user_balance, user_bonus_balance=user_bonus_balance)

@app.route('/tournament/<int:tournament_id>')
def tournament_detail(tournament_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç—É—Ä–Ω–∏—Ä–∞"""
    user = session.get('user')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä —Å –∫–æ–¥–∞–º–∏ –ª–æ–±–±–∏
    tournament = get_tournament_with_lobby_db(tournament_id)
    
    if not tournament:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('index'))
    
    # –£–°–ò–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Ç—É—Ä–Ω–∏—Ä—É
    if tournament['tournament_type'] == 'private':
        # –°–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
        if user and user.get('unique_username') == tournament['creator']:
            pass  # –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å
        else:
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –≤ —Å–µ—Å—Å–∏–∏
            tournament_access = session.get('tournament_access', [])
            if tournament_id not in tournament_access:
                # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
                flash('–≠—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.', 'error')
                return redirect(url_for('tournament_password', tournament_id=tournament_id))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
    tournament['participants'] = get_tournament_participants(tournament_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    user_balance = 0
    user_bonus_balance = 0
    if user and user.get('profile_created'):
        user_balance = get_user_balance(int(user['id']))
        user_bonus_balance = get_user_bonus_balance(int(user['id']))
    
    return render_template('tournament_detail.html', 
                         tournament=tournament, 
                         bot_name=BOT_NAME, 
                         user=user,
                         user_balance=user_balance,
                         user_bonus_balance=user_bonus_balance)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
    tournament['participants'] = get_tournament_participants(tournament_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    user_balance = 0
    if user and user.get('profile_created'):
        user_balance = get_user_balance(int(user['id']))
    
    return render_template('tournament_detail.html', 
                         tournament=tournament, 
                         bot_name=BOT_NAME, 
                         user=user,
                         user_balance=user_balance)  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ –±–∞–ª–∞–Ω—Å

@app.route('/create_profile', methods=['GET', 'POST'])
def create_profile():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã"""
    
    if request.method == 'GET':
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        telegram_user = session.get('telegram_user')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        user = session.get('user')
        if user and user.get('profile_created'):
            return redirect(url_for('index'))
        
        if not telegram_user:
            flash('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram', 'error')
            return redirect(url_for('index'))
        
        return render_template('create_username.html', user=telegram_user, bot_name=BOT_NAME)
    
    else:  # POST
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        telegram_user = session.get('telegram_user')
        if not telegram_user:
            flash('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram –∑–∞–Ω–æ–≤–æ.', 'error')
            return redirect(url_for('index'))
        
        unique_username = request.form.get('unique_username', '').strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
        if not re.match(r'^[a-zA-Z0-9_]{3,20}$', unique_username):
            flash('–ù–∏–∫–Ω–µ–π–º –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º', 'error')
            return redirect(url_for('create_profile'))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if is_username_taken_db(unique_username):
            flash('–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.', 'error')
            return redirect(url_for('create_profile'))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        success = create_user_db(
            telegram_id=int(telegram_user['id']),
            unique_username=unique_username,
            first_name=telegram_user['first_name'],
            last_name=telegram_user.get('last_name', ''),
            photo_url=telegram_user.get('photo_url', '')
        )
        
        if success:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session['user'] = {
                'id': telegram_user['id'],
                'first_name': telegram_user['first_name'],
                'last_name': telegram_user.get('last_name', ''),
                'photo_url': telegram_user.get('photo_url', ''),
                'profile_created': True,
                'unique_username': unique_username
            }
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            session.pop('telegram_user', None)
            
            flash(f'üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GarantGame, {unique_username}!', 'success')
            return redirect(url_for('index'))
        else:
            flash('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error')
            return redirect(url_for('create_profile'))

@app.route('/auth/telegram')
def telegram_auth():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram OAuth"""
    auth_data = dict(request.args)
    
    print(f"üåê –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:")
    for key, value in auth_data.items():
        print(f"   {key}: {value}")
    
    telegram_id = auth_data.get('id')
    first_name = auth_data.get('first_name', '')
    last_name = auth_data.get('last_name', '')
    username = auth_data.get('username', '')
    photo_url = auth_data.get('photo_url', '')
    print(f"üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ photo_url: '{photo_url}'")
    print(f"üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ: {auth_data}")
    auth_date = auth_data.get('auth_date')
    
    print(f"üñºÔ∏è photo_url –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: '{photo_url}'")
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not telegram_id or not first_name or not auth_date:
        flash('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 'error')
        return redirect(url_for('index'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ (–Ω–µ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç)
    try:
        auth_timestamp = int(auth_date)
        current_time = int(time.time())
        if current_time - auth_timestamp > 600:  # 10 –º–∏–Ω—É—Ç
            flash('–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.', 'error')
            return redirect(url_for('index'))
    except ValueError:
        flash('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö', 'error')
        return redirect(url_for('index'))
    
    try:
        telegram_id = int(telegram_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        existing_user = get_user_by_telegram_id_db(telegram_id)
        
        if existing_user:
            # –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
            session['user'] = {
                'id': str(telegram_id),
                'first_name': existing_user.get('first_name', first_name),
                'last_name': existing_user.get('last_name', last_name),
                'photo_url': existing_user.get('photo_url', photo_url),
                'profile_created': True,
                'unique_username': existing_user['unique_username']
            }
            flash(f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {existing_user["unique_username"]}! üéÆ', 'success')
            return redirect(url_for('index'))
        else:
            # –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            session['telegram_user'] = {
                'id': str(telegram_id),
                'first_name': first_name,
                'last_name': last_name,
                'photo_url': photo_url,
            }
            flash(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}! –°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. üöÄ', 'success')
            return redirect(url_for('create_profile'))  # –ò–°–ü–†–ê–í–õ–ï–ù–û
            
    except ValueError:
        flash('–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error')
        return redirect(url_for('index'))

@app.route('/logout')
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    session.pop('user', None)
    session.pop('telegram_user', None)
    session.pop('tournament_access', None)  # –û—á–∏—â–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º —Ç—É—Ä–Ω–∏—Ä–∞–º
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'success')
    return redirect(url_for('index'))

@app.route('/create_tournament', methods=['POST'])
def create_tournament():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        flash('–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö', 'error')
        return redirect(url_for('index'))
    
    tournament_name = request.form.get('tournament_name')
    min_players = request.form.get('min_players', 10)
    max_players = request.form.get('max_players', 16)
    entry_fee = request.form.get('entry_fee', 0)
    tournament_type = request.form.get('tournament_type', 'public')
    tournament_password = request.form.get('tournament_password')
    start_date = request.form.get('start_date')
    start_time = request.form.get('start_time')
    prize_distribution_type = request.form.get('prize_distribution_type', 'pyramid')
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not tournament_name:
        flash('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞!', 'error')
        return redirect(url_for('create_tournament_page'))

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    if tournament_type == 'private':
        if not tournament_password or len(tournament_password) != 6 or not tournament_password.isdigit():
            flash('–î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è 6-–∑–Ω–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ —Ü–∏—Ñ—Ä', 'error')
            return redirect(url_for('create_tournament_page'))

    try:
        min_players = int(min_players)
        max_players = int(max_players)
        entry_fee = float(entry_fee)
        
        # –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –º–∏–Ω–∏–º—É–º 40 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if entry_fee == 0:
            if min_players < 40 or max_players < 40:
                flash('üéâ –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –º–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 40 —á–µ–ª–æ–≤–µ–∫', 'error')
                return redirect(url_for('create_tournament_page'))
            if min_players > 100 or max_players > 100:
                flash('–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞: 100 —á–µ–ª–æ–≤–µ–∫', 'error')
                return redirect(url_for('create_tournament_page'))
        else:
            # –ü–ª–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä - –º–∏–Ω–∏–º—É–º 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if min_players < 10 or min_players > 100:
                flash('–î–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –º–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 100', 'error')
                return redirect(url_for('create_tournament_page'))
            
        if max_players < 10 or max_players > 100:
            flash('–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 100', 'error')
            return redirect(url_for('create_tournament_page'))
            
        if min_players > max_players:
            flash('–ú–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞', 'error')
            return redirect(url_for('create_tournament_page'))
            
        if entry_fee < 0 or entry_fee > 1000:
            flash('–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç $0 –¥–æ $1000', 'error')
            return redirect(url_for('create_tournament_page'))
            
    except ValueError:
        flash('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–µ', 'error')
        return redirect(url_for('create_tournament_page'))
    
    if not start_date or not start_time:
        flash('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞', 'error')
        return redirect(url_for('create_tournament_page'))
    
    # –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    tournament_id = create_tournament_db(
        name=tournament_name, 
        min_players=min_players,
        max_players=max_players, 
        creator_username=user['unique_username'],
        start_date=start_date,
        start_time=start_time,
        entry_fee=entry_fee,
        tournament_type=tournament_type,
        tournament_password=tournament_password if tournament_type == 'private' else None,
        prize_distribution_type=prize_distribution_type  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£
    )
    
    if tournament_id:
        type_text = "–ø—Ä–∏–≤–∞—Ç–Ω—ã–π" if tournament_type == 'private' else "–ø—É–±–ª–∏—á–Ω—ã–π"
        if tournament_type == 'private':
            flash(f'{type_text.capitalize()} —Ç—É—Ä–Ω–∏—Ä "{tournament_name}" —Å–æ–∑–¥–∞–Ω! –ü–∞—Ä–æ–ª—å: {tournament_password}', 'success')
        else:
            flash(f'{type_text.capitalize()} —Ç—É—Ä–Ω–∏—Ä "{tournament_name}" —Å–æ–∑–¥–∞–Ω! ID: TOUR_{tournament_id}', 'success')
    else:
        flash('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞', 'error')
    
    return redirect(url_for('index'))

@app.route('/private_tournaments')
def private_tournaments():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
    all_tournaments = get_tournaments_db()
    private_tournaments = [t for t in all_tournaments if t['tournament_type'] == 'private']
    
    telegram_widget = create_telegram_login_widget(BOT_USERNAME)
    
    return render_template('private_tournaments.html', tournaments=private_tournaments, 
                         bot_name=BOT_NAME, user=user, telegram_widget=telegram_widget)

@app.route('/public_tournaments')
def public_tournaments():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã—Ö –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö)"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç—É—Ä–Ω–∏—Ä—ã (–∏ –ø—É–±–ª–∏—á–Ω—ã–µ, –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ)
    all_tournaments = get_tournaments_db()
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    user_balance = get_user_balance(int(user['id']))
    user_bonus_balance = get_user_bonus_balance(int(user['id']))
    
    telegram_widget = create_telegram_login_widget(BOT_USERNAME)
    
    return render_template('public_tournaments.html', tournaments=all_tournaments, 
                         bot_name=BOT_NAME, user=user, telegram_widget=telegram_widget, 
                         user_balance=user_balance, user_bonus_balance=user_bonus_balance)

@app.route('/join/<int:tournament_id>')
def join_tournament_web(tournament_id):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É —á–µ—Ä–µ–∑ –≤–µ–±"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        flash('–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament = None
    tournaments = get_tournaments_db()
    for t in tournaments:
        if t['id'] == tournament_id:
            tournament = t
            break
    
    if not tournament:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('index'))
    
    # –£–°–ò–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Ç—É—Ä–Ω–∏—Ä—É –±–µ–∑ –ø–∞—Ä–æ–ª—è
    if tournament['tournament_type'] == 'private':
        # –°–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
        if user.get('unique_username') != tournament['creator']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –≤ —Å–µ—Å—Å–∏–∏
            tournament_access = session.get('tournament_access', [])
            if tournament_id not in tournament_access:
                flash('–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Ç—É—Ä–Ω–∏—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å', 'error')
                return redirect(url_for('tournament_password', tournament_id=tournament_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –Ω–µ –ø–æ–ª–Ω—ã–π
    if tournament['current_players'] >= tournament['max_players']:
        flash('–¢—É—Ä–Ω–∏—Ä —É–∂–µ –ø–æ–ª–Ω—ã–π', 'error')
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    participants = get_tournament_participants(tournament_id)
    for participant in participants:
        if participant['username'] == user['unique_username']:
            flash('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ', 'error')
            return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    success = add_tournament_participant(tournament_id, user['unique_username'])
    
    if success:
        if tournament['entry_fee'] > 0:
            flash(f'–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É! –û–ø–ª–∞—Ç–∞ ${tournament["entry_fee"]} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.', 'success')
        else:
            flash('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É!', 'success')
    else:
        flash('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç—É—Ä–Ω–∏—Ä—É', 'error')
    
    return redirect(url_for('tournament_detail', tournament_id=tournament_id))

@app.route('/delete_tournament/<int:tournament_id>')
def delete_tournament_web(tournament_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        flash('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament = None
    tournaments = get_tournaments_db()
    for t in tournaments:
        if t['id'] == tournament_id:
            tournament = t
            break
    
    if not tournament:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('index'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    if tournament['creator'] != user['unique_username']:
        flash('–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã', 'error')
        return redirect(url_for('index'))
    
    # –£–¥–∞–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä
    success = delete_tournament_db(tournament_id)
    
    if success:
        flash(f'–¢—É—Ä–Ω–∏—Ä "{tournament["name"]}" —É–¥–∞–ª–µ–Ω', 'success')
    else:
        flash('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞', 'error')
    
    return redirect(url_for('index'))

@app.route('/tournament/<int:tournament_id>/password', methods=['GET', 'POST'])
def tournament_password(tournament_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament = None
    tournaments = get_tournaments_db()
    for t in tournaments:
        if t['id'] == tournament_id:
            tournament = t
            break
    
    if not tournament:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('index'))
    
    if tournament['tournament_type'] != 'private':
        # –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –ø—É–±–ª–∏—á–Ω—ã–π, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ—Ç–∞–ª—è–º
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    
    if request.method == 'GET':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        return render_template('tournament_password.html', 
                             tournament=tournament, 
                             bot_name=BOT_NAME)
    
    else:  # POST
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        entered_password = request.form.get('password')
        
        if not entered_password:
            flash('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', 'error')
            return render_template('tournament_password.html', 
                                 tournament=tournament, 
                                 bot_name=BOT_NAME)
        
        if entered_password == tournament['tournament_password']:
            # –ü–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç—É–ø –≤ —Å–µ—Å—Å–∏—é
            if 'tournament_access' not in session:
                session['tournament_access'] = []
            
            if tournament_id not in session['tournament_access']:
                session['tournament_access'].append(tournament_id)
            
            flash('–î–æ—Å—Ç—É–ø –∫ —Ç—É—Ä–Ω–∏—Ä—É –ø–æ–ª—É—á–µ–Ω!', 'success')
            return redirect(url_for('tournament_detail', tournament_id=tournament_id))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error')
            return render_template('tournament_password.html', 
                                 tournament=tournament, 
                                 bot_name=BOT_NAME)
                        
@app.route('/edit_tournament/<int:tournament_id>')
def edit_tournament_page(tournament_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        flash('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament = None
    tournaments = get_tournaments_db()
    for t in tournaments:
        if t['id'] == tournament_id:
            tournament = t
            break
    
    if not tournament:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('index'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if tournament['creator'] != user['unique_username']:
        flash('–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã', 'error')
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    tournament['participants'] = get_tournament_participants(tournament_id)
    
    return render_template('edit_tournament.html', 
                         tournament=tournament, 
                         bot_name=BOT_NAME, 
                         user=user)

@app.route('/edit_tournament/<int:tournament_id>', methods=['POST'])
def edit_tournament(tournament_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        flash('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament = None
    tournaments = get_tournaments_db()
    for t in tournaments:
        if t['id'] == tournament_id:
            tournament = t
            break
    
    if not tournament:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('index'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if tournament['creator'] != user['unique_username']:
        flash('–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã', 'error')
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    min_players = request.form.get('min_players')
    max_players = request.form.get('max_players')
    entry_fee = request.form.get('entry_fee')
    start_date = request.form.get('start_date')
    start_time = request.form.get('start_time')
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    try:
        min_players = int(min_players)
        max_players = int(max_players)
        entry_fee = float(entry_fee)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        current_participants = len(get_tournament_participants(tournament_id))
        
        if min_players < current_participants:
            flash(f'–ú–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {current_participants}', 'error')
            return redirect(url_for('edit_tournament_page', tournament_id=tournament_id))
            
        if max_players < current_participants:
            flash(f'–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {current_participants}', 'error')
            return redirect(url_for('edit_tournament_page', tournament_id=tournament_id))
        
        if min_players > max_players:
            flash('–ú–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞', 'error')
            return redirect(url_for('edit_tournament_page', tournament_id=tournament_id))
            
        if entry_fee < 0 or entry_fee > 1000:
            flash('–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç $0 –¥–æ $1000', 'error')
            return redirect(url_for('edit_tournament_page', tournament_id=tournament_id))
            
    except ValueError:
        flash('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–µ', 'error')
        return redirect(url_for('edit_tournament_page', tournament_id=tournament_id))
    
    if not start_date or not start_time:
        flash('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞', 'error')
        return redirect(url_for('edit_tournament_page', tournament_id=tournament_id))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = update_tournament_db(tournament_id, min_players, max_players, entry_fee, start_date, start_time)
    
    if success:
        flash('–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success')
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    else:
        flash('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞', 'error')
        return redirect(url_for('edit_tournament_page', tournament_id=tournament_id))

@app.route('/change_password/<int:tournament_id>')
def change_password_page(tournament_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        flash('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament = None
    tournaments = get_tournaments_db()
    for t in tournaments:
        if t['id'] == tournament_id:
            tournament = t
            break
    
    if not tournament:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('index'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    if tournament['creator'] != user['unique_username']:
        flash('–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤', 'error')
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
    if tournament['tournament_type'] != 'private':
        flash('–ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —É –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤', 'error')
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    tournament['participants'] = get_tournament_participants(tournament_id)
    
    return render_template('change_password.html', 
                         tournament=tournament, 
                         bot_name=BOT_NAME, 
                         user=user)

@app.route('/change_password/<int:tournament_id>', methods=['POST'])
def change_password(tournament_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        flash('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament = None
    tournaments = get_tournaments_db()
    for t in tournaments:
        if t['id'] == tournament_id:
            tournament = t
            break
    
    if not tournament:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('index'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    if tournament['creator'] != user['unique_username']:
        flash('–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤', 'error')
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
    if tournament['tournament_type'] != 'private':
        flash('–ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —É –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤', 'error')
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ —Ñ–æ—Ä–º—ã
    new_password = request.form.get('new_password')
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    if not new_password:
        flash('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å', 'error')
        return redirect(url_for('change_password_page', tournament_id=tournament_id))
    
    if len(new_password) != 6 or not new_password.isdigit():
        flash('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä', 'error')
        return redirect(url_for('change_password_page', tournament_id=tournament_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ
    if new_password == tournament['tournament_password']:
        flash('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ', 'error')
        return redirect(url_for('change_password_page', tournament_id=tournament_id))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = update_tournament_password_db(tournament_id, new_password)
    
    if success:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —ç—Ç–æ–º—É —Ç—É—Ä–Ω–∏—Ä—É
        # (—ç—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç –∏—Ö –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å)
        flash(f'–ü–∞—Ä–æ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_password}', 'success')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        if tournament['current_players'] > 0:
            flash('‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç—É—Ä–Ω–∏—Ä–∞', 'warning')
        
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    else:
        flash('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è', 'error')
        return redirect(url_for('change_password_page', tournament_id=tournament_id))

@app.route('/lobby_codes/<int:tournament_id>')
def lobby_codes_page(tournament_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞–º–∏ –ª–æ–±–±–∏"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        flash('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä —Å –∫–æ–¥–∞–º–∏ –ª–æ–±–±–∏
    tournament = get_tournament_with_lobby_db(tournament_id)
    
    if not tournament:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('index'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞–º–∏
    if tournament['creator'] != user['unique_username']:
        flash('–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥–∞–º–∏ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤', 'error')
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    tournament['participants'] = get_tournament_participants(tournament_id)
    
    return render_template('lobby_codes.html', 
                         tournament=tournament, 
                         bot_name=BOT_NAME, 
                         user=user)

@app.route('/lobby_codes/<int:tournament_id>', methods=['POST'])
def lobby_codes(tournament_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤ –ª–æ–±–±–∏"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        flash('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament = get_tournament_with_lobby_db(tournament_id)
    
    if not tournament:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('index'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞–º–∏
    if tournament['creator'] != user['unique_username']:
        flash('–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥–∞–º–∏ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤', 'error')
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–¥—ã
    if request.form.get('clear_codes'):
        success = update_lobby_codes_db(tournament_id, None, None)
        if success:
            flash('–ö–æ–¥—ã –ª–æ–±–±–∏ –æ—á–∏—â–µ–Ω—ã', 'success')
        else:
            flash('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–¥–æ–≤', 'error')
        return redirect(url_for('lobby_codes_page', tournament_id=tournament_id))
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –∏–∑ —Ñ–æ—Ä–º—ã
    lobby_id = request.form.get('lobby_id', '').strip()
    lobby_code = request.form.get('lobby_code', '').strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not lobby_id and not lobby_code:
        flash('–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–¥ (ID –∏–ª–∏ –ö–æ–¥ –ª–æ–±–±–∏)', 'error')
        return redirect(url_for('lobby_codes_page', tournament_id=tournament_id))
    
    if lobby_id and len(lobby_id) > 20:
        flash('ID –ª–æ–±–±–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤', 'error')
        return redirect(url_for('lobby_codes_page', tournament_id=tournament_id))
        
    if lobby_code and len(lobby_code) > 20:
        flash('–ö–æ–¥ –ª–æ–±–±–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤', 'error')
        return redirect(url_for('lobby_codes_page', tournament_id=tournament_id))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = update_lobby_codes_db(tournament_id, lobby_id or None, lobby_code or None)

    if success:
        participants_count = len(get_tournament_participants(tournament_id))
        if participants_count > 0:
            # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ö–û–î–ê–• –õ–û–ë–ë–ò
            send_lobby_codes_notifications(tournament_id, tournament['name'], lobby_id, lobby_code)
            flash(f'–ö–æ–¥—ã –ª–æ–±–±–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã {participants_count} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!', 'success')
        else:
            flash('–ö–æ–¥—ã –ª–æ–±–±–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç)', 'success')
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    else:
        flash('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–æ–≤', 'error')
        return redirect(url_for('lobby_codes_page', tournament_id=tournament_id))


@app.route('/balance')
def balance_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        flash('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    user_balance = get_user_balance(int(user['id']))
    user_bonus_balance = get_user_bonus_balance(int(user['id']))
    
    return render_template('balance.html', 
                         user=user, 
                         user_balance=user_balance,
                         user_bonus_balance=user_bonus_balance,
                         bot_name=BOT_NAME)

@app.route('/balance/topup', methods=['POST'])
def balance_topup():
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        flash('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å', 'error')
        return redirect(url_for('index'))
    
    try:
        amount = float(request.form.get('amount', 0))
        
        if amount < 1 or amount > 1000:
            flash('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç $1 –¥–æ $1000', 'error')
            return redirect(url_for('balance_page'))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        current_balance = get_user_balance(int(user['id']))
        new_balance = current_balance + amount
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        if update_user_balance(int(user['id']), new_balance):
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            add_transaction(
                int(user['id']), 
                'topup', 
                amount, 
                f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount}'
            )
            
            flash(f'üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount:.2f}! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${new_balance:.2f}', 'success')
        else:
            flash('–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', 'error')
            
    except ValueError:
        flash('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞', 'error')
    
    return redirect(url_for('index'))

@app.route('/balance/history')
def balance_history():
    """–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        flash('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    flash('–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ', 'warning')
    return redirect(url_for('balance_page'))

@app.route('/join_with_balance/<int:tournament_id>')
def join_tournament_with_balance(tournament_id):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É —Å –æ–ø–ª–∞—Ç–æ–π –∏–∑ –±–∞–ª–∞–Ω—Å–∞"""
    user = session.get('user')
    if not user or not user.get('profile_created'):
        flash('–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament = None
    tournaments = get_tournaments_db()
    for t in tournaments:
        if t['id'] == tournament_id:
            tournament = t
            break
    
    if not tournament:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('index'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –Ω–µ –ø–æ–ª–Ω—ã–π
    if tournament['current_players'] >= tournament['max_players']:
        flash('–¢—É—Ä–Ω–∏—Ä —É–∂–µ –ø–æ–ª–Ω—ã–π', 'error')
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    participants = get_tournament_participants(tournament_id)
    for participant in participants:
        if participant['username'] == user['unique_username']:
            flash('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ', 'error')
            return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    
    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
    if tournament['entry_fee'] == 0:
        success = add_tournament_participant(tournament_id, user['unique_username'])
        if success:
            flash('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É —Ç—É—Ä–Ω–∏—Ä—É!', 'success')
        else:
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç—É—Ä–Ω–∏—Ä—É', 'error')
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))
    
    # –ü–ª–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä - —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞
    success, message = process_tournament_payment_from_balance(
        int(user['id']), 
        tournament_id, 
        user['unique_username'], 
        tournament['entry_fee']
    )
    
    if success:
        flash(f'‚úÖ {message}', 'success')
    else:
        flash(f'‚ùå {message}', 'error')
        # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å
        if "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" in message:
            flash('üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ', 'warning')
    
    return redirect(url_for('tournament_detail', tournament_id=tournament_id))


# ==================== –ê–î–ú–ò–ù–°–ö–ò–ï –†–û–£–¢–´ ====================

@app.route('/administrator')
@admin_required
def admin_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏"""
    user = session.get('user')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    all_tournaments = get_tournaments_db()
    all_users = get_all_users_count()  # –°–æ–∑–¥–∞–¥–∏–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_tournaments = len(all_tournaments)
    active_tournaments = len([t for t in all_tournaments if t['current_players'] >= t['min_players']])
    total_prize_pool = sum([t['entry_fee'] * t['current_players'] for t in all_tournaments if t['entry_fee'] > 0])
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ –¥–∞—Ç–µ (–±–ª–∏–∂–∞–π—à–∏–µ —Å–≤–µ—Ä—Ö—É)
    upcoming_tournaments = sorted(
        [t for t in all_tournaments if t['start_date']], 
        key=lambda x: f"{x['start_date']} {x['start_time']}"
    )[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 10 –±–ª–∏–∂–∞–π—à–∏—Ö
    
    return render_template('admin_dashboard.html',
                         user=user,
                         bot_name=BOT_NAME,
                         total_users=all_users,
                         total_tournaments=total_tournaments,
                         active_tournaments=active_tournaments,
                         total_prize_pool=f"{total_prize_pool:.2f}",
                         upcoming_tournaments=upcoming_tournaments)

@app.route('/administrator/users')
@admin_required
def admin_users():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ"""
    user = session.get('user')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = get_all_users_for_admin()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = len(all_users)
    users_with_balance = len([u for u in all_users if u['balance'] > 0])
    users_with_pubg = len([u for u in all_users if u['pubg_nickname']])
    total_balance = sum([u['balance'] + u['bonus_balance'] for u in all_users])
    
    return render_template('admin_users.html',
                         user=user,
                         bot_name=BOT_NAME,
                         users=all_users,
                         total_users=total_users,
                         users_with_balance=users_with_balance,
                         users_with_pubg=users_with_pubg,
                         total_balance=f"{total_balance:.2f}")

@app.route('/administrator/tournaments')
@admin_required
def admin_tournaments():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ"""
    user = session.get('user')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã
    all_tournaments = get_tournaments_db()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä—ã: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –¥–∞—Ç–µ (–±–ª–∏–∂–∞–π—à–∏–µ —Å–≤–µ—Ä—Ö—É), –ø–æ—Ç–æ–º –ø–æ ID
    def tournament_sort_key(tournament):
        if tournament['start_date'] and tournament['start_time']:
            return f"{tournament['start_date']} {tournament['start_time']}"
        else:
            return "9999-12-31 23:59"  # –¢—É—Ä–Ω–∏—Ä—ã –±–µ–∑ –¥–∞—Ç—ã - –≤ –∫–æ–Ω–µ—Ü
    
    sorted_tournaments = sorted(all_tournaments, key=tournament_sort_key)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_tournaments = len(all_tournaments)
    active_tournaments = len([t for t in all_tournaments if t['current_players'] >= t['min_players']])
    paid_tournaments = len([t for t in all_tournaments if t['entry_fee'] > 0])
    free_tournaments = len([t for t in all_tournaments if t['entry_fee'] == 0])
    
    return render_template('admin_tournaments.html',
                         user=user,
                         bot_name=BOT_NAME,
                         tournaments=sorted_tournaments,
                         total_tournaments=total_tournaments,
                         active_tournaments=active_tournaments,
                         paid_tournaments=paid_tournaments,
                         free_tournaments=free_tournaments)

                         
@app.route('/administrator/tournament/<int:tournament_id>')
@admin_required
def admin_tournament_manage(tournament_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç—É—Ä–Ω–∏—Ä–æ–º"""
    user = session.get('user')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament = get_tournament_with_lobby_db(tournament_id)
    if not tournament:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('admin_tournaments'))
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    tournament['participants'] = get_tournament_participants(tournament_id)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞
    if tournament['entry_fee'] > 0:
        # –ü–ª–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
        prize_calculation = calculate_prize_distribution(
            tournament['current_players'], 
            tournament['entry_fee'], 
            tournament.get('prize_distribution_type', 'pyramid')
        )
        prize_places = prize_calculation['distribution']
    else:
        # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
        from database import calculate_free_tournament_prizes
        prize_calculation = calculate_free_tournament_prizes(tournament['current_players'])
        prize_places = prize_calculation['distribution']
    
    return render_template('admin_tournament_manage.html',
                         user=user,
                         bot_name=BOT_NAME,
                         tournament=tournament,
                         prize_places=prize_places)

@app.route('/administrator/tournament/<int:tournament_id>/distribute_prizes', methods=['POST'])
@admin_required
def admin_distribute_prizes(tournament_id):
    """–í—ã–¥–∞—á–∞ –ø—Ä–∏–∑–æ–≤ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º"""
    user = session.get('user')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament = get_tournament_with_lobby_db(tournament_id)
    if not tournament:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('admin_tournaments'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –≥–æ—Ç–æ–≤
    if tournament['current_players'] < tournament['min_players']:
        flash('–¢—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –Ω–∞—á–∞–ª—É', 'error')
        return redirect(url_for('admin_tournament_manage', tournament_id=tournament_id))
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    winners = {}
    pubg_results = {}
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞
    if tournament['entry_fee'] > 0:
        prize_calculation = calculate_prize_distribution(
            tournament['current_players'], 
            tournament['entry_fee'], 
            tournament.get('prize_distribution_type', 'pyramid')
        )
        prize_places = prize_calculation['distribution']
    else:
        from database import calculate_free_tournament_prizes
        prize_calculation = calculate_free_tournament_prizes(tournament['current_players'])
        prize_places = prize_calculation['distribution']
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    for place_data in prize_places:
        place = place_data['place']
        winner_username = request.form.get(f'winner_{place}')
        pubg_nickname = request.form.get(f'pubg_result_{place}', '')
        
        if winner_username:
            winners[place] = winner_username
            pubg_results[place] = pubg_nickname
    
    if not winners:
        flash('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è', 'error')
        return redirect(url_for('admin_tournament_manage', tournament_id=tournament_id))
    
    # –í—ã–¥–∞–µ–º –ø—Ä–∏–∑—ã
    success_count = 0
    for place, username in winners.items():
        place_data = next((p for p in prize_places if p['place'] == place), None)
        if not place_data:
            continue
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        user_data = get_user_by_username(username)
        if not user_data:
            flash(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            continue
        
        # –í—ã–¥–∞–µ–º –ø—Ä–∏–∑
        if tournament['entry_fee'] > 0:
            # –ü–ª–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä - —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏
            amount = place_data['amount']
            current_balance = get_user_balance(user_data['telegram_id'])
            new_balance = current_balance + amount
            
            if update_user_balance(user_data['telegram_id'], new_balance):
                add_transaction(
                    user_data['telegram_id'], 
                    'tournament_prize', 
                    amount, 
                    f'–ü—Ä–∏–∑ –∑–∞ {place} –º–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–µ TOUR_{tournament_id}',
                    tournament_id
                )
                success_count += 1
        else:
            # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã
            real_money = place_data.get('real_money', 0)
            bonus_money = place_data.get('bonus', 0)
            
            # –í—ã–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏
            if real_money > 0:
                current_balance = get_user_balance(user_data['telegram_id'])
                new_balance = current_balance + real_money
                update_user_balance(user_data['telegram_id'], new_balance)
                add_transaction(
                    user_data['telegram_id'], 
                    'tournament_prize', 
                    real_money, 
                    f'–î–µ–Ω–µ–∂–Ω—ã–π –ø—Ä–∏–∑ –∑–∞ {place} –º–µ—Å—Ç–æ –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ TOUR_{tournament_id}',
                    tournament_id
                )
            
            # –í—ã–¥–∞–µ–º –±–æ–Ω—É—Å—ã
            if bonus_money > 0:
                current_bonus = get_user_bonus_balance(user_data['telegram_id'])
                new_bonus = current_bonus + bonus_money
                update_user_bonus_balance(user_data['telegram_id'], new_bonus)
                add_transaction(
                    user_data['telegram_id'], 
                    'bonus_prize', 
                    bonus_money, 
                    f'–ë–æ–Ω—É—Å–Ω—ã–π –ø—Ä–∏–∑ –∑–∞ {place} –º–µ—Å—Ç–æ –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ TOUR_{tournament_id}',
                    tournament_id
                )
            
            success_count += 1
    
    if success_count > 0:
        flash(f'–ü—Ä–∏–∑—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã {success_count} –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º!', 'success')
    else:
        flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–∏–∑–æ–≤', 'error')
    
    return redirect(url_for('admin_tournaments'))


@app.route('/administrator/tournament/<int:tournament_id>/add_fake_participants')
@admin_required
def admin_add_fake_participants(tournament_id):
    """–¢–ï–°–¢: –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tournament = get_tournament_with_lobby_db(tournament_id)
    if not tournament:
        flash('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('admin_tournaments'))
    
    # –î–æ–±–∞–≤–ª—è–µ–º 15 —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    added = add_fake_participants_for_test(tournament_id, 15)
    flash(f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added} —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ "{tournament["name"]}"', 'success')
    
    return redirect(url_for('admin_tournament_manage', tournament_id=tournament_id))



if __name__ == '__main__':
    print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å GarantGame –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000")
    app.run(debug=True, port=8000)
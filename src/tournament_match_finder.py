import requests
import json
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ config
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from config.settings import PUBG_API_KEY

class TournamentMatchFinder:
    def __init__(self):
        self.api_key = PUBG_API_KEY
        self.base_url = "https://api.pubg.com"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Accept": "application/vnd.api+json"
        }
    
    def find_tournament_match_real(self, tournament_participants, lobby_start_time):
        """–†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –º–∞—Ç—á–∞ —Ç—É—Ä–Ω–∏—Ä–∞"""
        print(f"üîç –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –º–∞—Ç—á–∞ —Ç—É—Ä–Ω–∏—Ä–∞")
        print(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_participants)}")
        print(f"‚è∞ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {lobby_start_time}")
        
        # –ü–æ–ª—É—á–∞–µ–º PUBG –Ω–∏–∫–Ω–µ–π–º—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        pubg_nicks = [p['pubg_nickname'] for p in tournament_participants if p['pubg_nickname']]
        
        if len(pubg_nicks) < 2:
            return {"error": "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å PUBG –Ω–∏–∫–Ω–µ–π–º–∞–º–∏"}
        
        print(f"üéÆ PUBG –Ω–∏–∫–∏: {pubg_nicks}")
        
        # –î–ï–ú–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–±–æ—á–∏–π –º–∞—Ç—á
        print(f"ü§ñ –î–ï–ú–û –†–ï–ñ–ò–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ç—á —Å –¥–∞–Ω–Ω—ã–º–∏")
        return self.demo_tournament_search(pubg_nicks, tournament_participants)

    def demo_tournament_search(self, pubg_nicks, tournament_participants):
        """–î–ï–ú–û –ø–æ–∏—Å–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ç—á"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–±–æ—á–∏–π Match ID
            known_match_id = "d79dbc5d-c215-4148-a164-a38977b11bae"
            print(f"üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ç—á: {known_match_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞
            match_results = self.get_full_match_results(known_match_id)
            
            if "error" in match_results:
                return {"error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ-–º–∞—Ç—á–∞: {match_results['error']}"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            match_players = [p['player_name'] for p in match_results['results']]
            our_players = [nick for nick in pubg_nicks if nick in match_players]
            
            print(f"üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –º–∞—Ç—á–µ: {len(match_players)}")
            print(f"üéØ –ù–∞—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(our_players)}")
            print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ: {our_players}")
            
            if len(our_players) > 0:
                our_percentage = len(our_players) / len(pubg_nicks) * 100
                print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {our_percentage:.1f}%")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                filtered_results = []
                for player in match_results['results']:
                    if player['player_name'] in pubg_nicks:
                        # –°–≤—è–∑—ã–≤–∞–µ–º —Å username –Ω–∞ —Å–∞–π—Ç–µ
                        for participant in tournament_participants:
                            if participant['pubg_nickname'] == player['player_name']:
                                player['site_username'] = participant['username']
                                break
                        filtered_results.append(player)
                
                print(f"‚úÖ –î–ï–ú–û –£–°–ü–ï–®–ù–û: –ù–∞–π–¥–µ–Ω–æ {len(filtered_results)} –Ω–∞—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤")
                
                return {
                    "success": True,
                    "method": "demo_search",
                    "match_id": known_match_id,
                    "our_players_found": our_players,
                    "our_percentage": our_percentage,
                    "results": filtered_results,
                    "demo_note": f"–î–ï–ú–û: –ò–∑ {len(our_players)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, {len(filtered_results)} —Å–≤—è–∑–∞–Ω—ã —Å —Å–∞–π—Ç–æ–º"
                }
            else:
                print(f"‚ùå –í –¥–µ–º–æ-–º–∞—Ç—á–µ –Ω–∞—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5 –∏–≥—Ä–æ–∫–æ–≤ –∫–∞–∫ "–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö" –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                demo_results = match_results['results'][:5]
                for i, player in enumerate(demo_results):
                    player['site_username'] = f"demo_user_{i+1}"
                
                return {
                    "success": True,
                    "method": "demo_fallback",
                    "match_id": known_match_id,
                    "our_players_found": [],
                    "results": demo_results,
                    "demo_note": "–î–ï–ú–û: –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 5 –∏–≥—Ä–æ–∫–æ–≤ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä"
                }
                
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –¥–µ–º–æ-–ø–æ–∏—Å–∫–∞: {str(e)}"}

    def get_player_recent_matches(self, player_name):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –º–∞—Ç—á–∏ –∏–≥—Ä–æ–∫–∞"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è PUBG Mobile –∏ PC
            platforms = [
                'tournament',  # –¢—É—Ä–Ω–∏—Ä–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
                'steam',       # PC Steam
                'kakao',       # PC Kakao (–ö–æ—Ä–µ—è) 
                'console',     # Xbox/PlayStation
                'psn',         # PlayStation
                'xbox',        # Xbox
                'stadia'       # Google Stadia
            ]
            
            for platform in platforms:
                print(f"üîç –ò—â–µ–º –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {platform}")
                
                url = f"{self.base_url}/shards/{platform}/players"
                params = {'filter[playerNames]': player_name}
                response = requests.get(url, headers=self.headers, params=params)
                
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    players = data.get('data', [])
                    
                    if players:
                        player = players[0]
                        matches = player.get('relationships', {}).get('matches', {}).get('data', [])
                        match_ids = [match['id'] for match in matches[:10]]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∞—Ç—á–µ–π
                        
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–∞ {platform}, –º–∞—Ç—á–µ–π: {len(match_ids)}")
                        return {
                            "success": True,
                            "platform": platform,
                            "matches": match_ids
                        }
                    else:
                        print(f"‚ùå –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ {platform}")
                elif response.status_code == 404:
                    print(f"‚ùå –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ {platform} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                elif response.status_code == 400:
                    print(f"‚ùå –ü–ª–æ—Ö–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è {platform}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –Ω–∞ {platform}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
            
            return {"error": "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"}
            
        except Exception as e:
            return {"error": f"Exception: {str(e)}"}

    def get_match_basic_info(self, match_id):
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —à–∞—Ä–¥—ã
            shards = ['tournament', 'steam', 'kakao', 'console']
            
            for shard in shards:
                url = f"{self.base_url}/shards/{shard}/matches/{match_id}"
                response = requests.get(url, headers=self.headers)
                
                if response.status_code == 200:
                    data = response.json()
                    attrs = data.get('data', {}).get('attributes', {})
                    
                    return {
                        "success": True,
                        "createdAt": attrs.get('createdAt'),
                        "isCustomMatch": attrs.get('isCustomMatch', False),
                        "mapName": attrs.get('mapName'),
                        "gameMode": attrs.get('gameMode'),
                        "duration": attrs.get('duration')
                    }
            
            return {"error": f"–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º —à–∞—Ä–¥–µ"}
            
        except Exception as e:
            return {"error": f"Exception: {str(e)}"}

    def _is_after_time(self, match_time, lobby_start_time):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –º–∞—Ç—á –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ª–æ–±–±–∏"""
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –º–∞—Ç—á–∞ (ISO —Ñ–æ—Ä–º–∞—Ç)
            match_dt = datetime.fromisoformat(match_time.replace('Z', '+00:00'))
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ª–æ–±–±–∏
            if isinstance(lobby_start_time, str):
                lobby_dt = datetime.fromisoformat(lobby_start_time)
            else:
                lobby_dt = lobby_start_time
                
            result = match_dt > lobby_dt
            print(f"‚è∞ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: –º–∞—Ç—á {match_dt} > –ª–æ–±–±–∏ {lobby_dt} = {result}")
            return result
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return True  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å—Ä–∞–≤–Ω–∏—Ç—å - —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º
    
    def test_with_known_match(self):
        """–¢–µ—Å—Ç —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º Match ID - —Ä–∞–±–æ—Ç–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
        print(f"üß™ –¢–ï–°–¢ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º Match ID")
        
        known_match_id = "d79dbc5d-c215-4148-a164-a38977b11bae"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
        match_results = self.get_full_match_results(known_match_id)
        
        if "error" in match_results:
            print(f"‚ùå –û—à–∏–±–∫–∞: {match_results['error']}")
            return {"error": match_results['error']}
        
        print(f"‚úÖ –ú–∞—Ç—á –∑–∞–≥—Ä—É–∂–µ–Ω!")
        print(f"üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(match_results['results'])}")
        
        return {
            "success": True,
            "match_id": known_match_id,
            "total_players": len(match_results['results']),
            "results": match_results['results']
        }
    
    def get_full_match_results(self, match_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —à–∞—Ä–¥—ã
            shards = ['tournament', 'steam', 'kakao', 'console']
            
            for shard in shards:
                url = f"{self.base_url}/shards/{shard}/matches/{match_id}"
                response = requests.get(url, headers=self.headers)
                
                if response.status_code == 200:
                    data = response.json()
                    included = data.get('included', [])
                    participants = [item for item in included if item.get('type') == 'participant']
                    
                    results = []
                    for participant in participants:
                        stats = participant.get('attributes', {}).get('stats', {})
                        
                        result = {
                            "player_name": stats.get('name', 'Unknown'),
                            "placement": stats.get('winPlace', 0),
                            "kills": stats.get('kills', 0),
                            "damage": round(stats.get('damageDealt', 0), 2),
                            "survival_time": self._format_time(stats.get('timeSurvived', 0))
                        }
                        results.append(result)
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–µ—Å—Ç—É
                    results.sort(key=lambda x: x['placement'])
                    
                    return {
                        "success": True,
                        "results": results
                    }
            
            return {"error": f"–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º —à–∞—Ä–¥–µ"}
            
        except Exception as e:
            return {"error": f"Exception: {str(e)}"}
    
    def _format_time(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ MM:SS"""
        minutes = int(seconds // 60)
        secs = int(seconds % 60)
        return f"{minutes:02d}:{secs:02d}"

    def test_real_player_search(self, player_name):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
        print(f"üîç –¢–ï–°–¢: –ò—â–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ {player_name}")
        
        player_matches = self.get_player_recent_matches(player_name)
        
        if "error" in player_matches:
            print(f"‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {player_matches['error']}")
            return {"error": player_matches['error']}
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(player_matches['matches'])} –º–∞—Ç—á–µ–π –¥–ª—è {player_name}")
        print(f"üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {player_matches['platform']}")
        
        if len(player_matches['matches']) > 0:
            first_match = player_matches['matches'][0]
            print(f"üéÆ –ü–µ—Ä–≤—ã–π –º–∞—Ç—á: {first_match}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º —ç—Ç–æ—Ç –º–∞—Ç—á
            match_info = self.get_match_basic_info(first_match)
            if "error" not in match_info:
                print(f"‚úÖ –ò–Ω—Ñ–æ –æ –º–∞—Ç—á–µ –ø–æ–ª—É—á–µ–Ω–∞:")
                print(f"   üó∫Ô∏è –ö–∞—Ä—Ç–∞: {match_info.get('mapName', 'N/A')}")
                print(f"   üéÆ –†–µ–∂–∏–º: {match_info.get('gameMode', 'N/A')}")
                print(f"   üîß –ö–∞—Å—Ç–æ–º–Ω—ã–π: {match_info.get('isCustomMatch', False)}")
                print(f"   ‚è∞ –í—Ä–µ–º—è: {match_info.get('createdAt', 'N/A')}")
        
        return {"success": True, "matches_found": len(player_matches['matches'])}

if __name__ == "__main__":
    finder = TournamentMatchFinder()
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    finder.test_real_player_search("82_SINGAM")
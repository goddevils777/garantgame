import requests
import json
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ config
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from config.settings import PUBG_API_KEY

class TournamentMatchFinder:
    def __init__(self):
        self.api_key = PUBG_API_KEY
        self.base_url = "https://api.pubg.com"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Accept": "application/vnd.api+json"
        }
    
    def find_tournament_match_real(self, tournament_participants, lobby_start_time):
        """–†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –º–∞—Ç—á–∞ —Ç—É—Ä–Ω–∏—Ä–∞"""
        print(f"üîç –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –º–∞—Ç—á–∞ —Ç—É—Ä–Ω–∏—Ä–∞")
        return {"error": "–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫"}
    
    def test_with_known_match(self):
        """–¢–µ—Å—Ç —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º Match ID - —Ä–∞–±–æ—Ç–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
        print(f"üß™ –¢–ï–°–¢ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º Match ID")
        
        known_match_id = "d79dbc5d-c215-4148-a164-a38977b11bae"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
        match_results = self.get_full_match_results(known_match_id)
        
        if "error" in match_results:
            print(f"‚ùå –û—à–∏–±–∫–∞: {match_results['error']}")
            return {"error": match_results['error']}
        
        print(f"‚úÖ –ú–∞—Ç—á –∑–∞–≥—Ä—É–∂–µ–Ω!")
        print(f"üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(match_results['results'])}")
        
        return {
            "success": True,
            "match_id": known_match_id,
            "total_players": len(match_results['results']),
            "results": match_results['results']
        }
    
    def get_full_match_results(self, match_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞"""
        try:
            url = f"{self.base_url}/shards/tournament/matches/{match_id}"
            response = requests.get(url, headers=self.headers)
            
            if response.status_code != 200:
                return {"error": f"HTTP {response.status_code}"}
            
            data = response.json()
            included = data.get('included', [])
            participants = [item for item in included if item.get('type') == 'participant']
            
            results = []
            for participant in participants:
                stats = participant.get('attributes', {}).get('stats', {})
                
                result = {
                    "player_name": stats.get('name', 'Unknown'),
                    "placement": stats.get('winPlace', 0),
                    "kills": stats.get('kills', 0),
                    "damage": round(stats.get('damageDealt', 0), 2),
                    "survival_time": self._format_time(stats.get('timeSurvived', 0))
                }
                results.append(result)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–µ—Å—Ç—É
            results.sort(key=lambda x: x['placement'])
            
            return {
                "success": True,
                "results": results
            }
            
        except Exception as e:
            return {"error": f"Exception: {str(e)}"
    
    def _format_time(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ MM:SS"""
        minutes = int(seconds // 60)
        secs = int(seconds % 60)
        return f"{minutes:02d}:{secs:02d}"

    def test_real_player_search(self, player_name):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
        print(f"üîç –¢–ï–°–¢: –ò—â–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ {player_name}")
        
        player_matches = self.get_player_recent_matches(player_name)
        
        if "error" in player_matches:
            print(f"‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {player_matches['error']}")
            return {"error": player_matches['error']}
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(player_matches['matches'])} –º–∞—Ç—á–µ–π –¥–ª—è {player_name}")
        print(f"üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {player_matches['platform']}")
        
        if len(player_matches['matches']) > 0:
            first_match = player_matches['matches'][0]
            print(f"üéÆ –ü–µ—Ä–≤—ã–π –º–∞—Ç—á: {first_match}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º —ç—Ç–æ—Ç –º–∞—Ç—á
            match_info = self.get_match_basic_info(first_match)
            if "error" not in match_info:
                print(f"‚úÖ –ò–Ω—Ñ–æ –æ –º–∞—Ç—á–µ –ø–æ–ª—É—á–µ–Ω–∞:")
                print(f"   üó∫Ô∏è –ö–∞—Ä—Ç–∞: {match_info.get('mapName', 'N/A')}")
                print(f"   üéÆ –†–µ–∂–∏–º: {match_info.get('gameMode', 'N/A')}")
                print(f"   üîß –ö–∞—Å—Ç–æ–º–Ω—ã–π: {match_info.get('isCustomMatch', False)}")
                print(f"   ‚è∞ –í—Ä–µ–º—è: {match_info.get('createdAt', 'N/A')}")
        
        return {"success": True, "matches_found": len(player_matches['matches'])}

if __name__ == "__main__":
    finder = TournamentMatchFinder()
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    finder.test_real_player_search("82_SINGAM")

        
def find_tournament_match_real(self, tournament_participants, lobby_start_time):
    """–†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –º–∞—Ç—á–∞ —Ç—É—Ä–Ω–∏—Ä–∞"""
    print(f"üîç –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –º–∞—Ç—á–∞ —Ç—É—Ä–Ω–∏—Ä–∞")
    print(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_participants)}")
    print(f"‚è∞ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {lobby_start_time}")
    
    # –ü–æ–ª—É—á–∞–µ–º PUBG –Ω–∏–∫–Ω–µ–π–º—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    pubg_nicks = [p['pubg_nickname'] for p in tournament_participants if p['pubg_nickname']]
    
    if len(pubg_nicks) < 2:
        return {"error": "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å PUBG –Ω–∏–∫–Ω–µ–π–º–∞–º–∏"}
    
    print(f"üéÆ PUBG –Ω–∏–∫–∏: {pubg_nicks}")
    
    # –®–∞–≥ 1: –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    first_player = pubg_nicks[0]
    print(f"üîç –ò—â–µ–º –º–∞—Ç—á–∏ –∏–≥—Ä–æ–∫–∞: {first_player}")
    
    # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –µ–≥–æ –Ω–µ–¥–∞–≤–Ω–∏–µ –º–∞—Ç—á–∏
    player_matches = self.get_player_recent_matches(first_player)
    
    if "error" in player_matches:
        return {"error": f"–ò–≥—Ä–æ–∫ {first_player} –Ω–µ –Ω–∞–π–¥–µ–Ω: {player_matches['error']}"}
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(player_matches['matches'])} –Ω–µ–¥–∞–≤–Ω–∏—Ö –º–∞—Ç—á–µ–π")
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á
    for i, match_id in enumerate(player_matches['matches']):
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç—á {i+1}/{len(player_matches['matches'])}: {match_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
        match_info = self.get_match_basic_info(match_id)
        
        if "error" in match_info:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è info: {match_info['error']}")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –≠—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–∞—Ç—á?
        if not match_info.get('isCustomMatch', False):
            print(f"‚ùå –ù–µ –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–∞—Ç—á")
            continue
        
        print(f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π –º–∞—Ç—á!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –í—Ä–µ–º—è –º–∞—Ç—á–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞?
        match_time = match_info.get('createdAt', '')
        if not self._is_after_time(match_time, lobby_start_time):
            print(f"‚ùå –ú–∞—Ç—á –¥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ({match_time})")
            continue
            
        print(f"‚úÖ –ú–∞—Ç—á –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ —Ç—É—Ä–Ω–∏—Ä–∞!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞
        match_results = self.get_full_match_results(match_id)
        
        if "error" in match_results:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {match_results['error']}")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –°–∫–æ–ª—å–∫–æ –Ω–∞—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –º–∞—Ç—á–µ?
        match_players = [p['player_name'] for p in match_results['results']]
        our_players = [nick for nick in pubg_nicks if nick in match_players]
        
        our_percentage = len(our_players) / len(pubg_nicks) * 100
        
        print(f"üë• –ù–∞—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(our_players)}/{len(pubg_nicks)} ({our_percentage:.1f}%)")
        print(f"üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ: {our_players}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: >= 80% –Ω–∞—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?
        if our_percentage >= 80:
            print(f"üéâ –ù–ê–ô–î–ï–ù –ú–ê–¢–ß –¢–£–†–ù–ò–†–ê!")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            filtered_results = []
            for player in match_results['results']:
                if player['player_name'] in pubg_nicks:
                    # –°–≤—è–∑—ã–≤–∞–µ–º —Å username –Ω–∞ —Å–∞–π—Ç–µ
                    for participant in tournament_participants:
                        if participant['pubg_nickname'] == player['player_name']:
                            player['site_username'] = participant['username']
                            break
                    filtered_results.append(player)
            
            return {
                "success": True,
                "method": "real_search",
                "match_id": match_id,
                "our_players_found": our_players,
                "match_info": match_info,
                "results": filtered_results
            }
        else:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ ({our_percentage:.1f}% < 80%)")
    
    return {"error": f"–ú–∞—Ç—á —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {len(player_matches['matches'])} –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–≥—Ä"}

def get_match_basic_info(self, match_id):
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ"""
    try:
        url = f"{self.base_url}/shards/tournament/matches/{match_id}"
        response = requests.get(url, headers=self.headers)
        
        if response.status_code != 200:
            return {"error": f"HTTP {response.status_code}"}
        
        data = response.json()
        attrs = data.get('data', {}).get('attributes', {})
        
        return {
            "success": True,
            "createdAt": attrs.get('createdAt'),
            "isCustomMatch": attrs.get('isCustomMatch', False),
            "mapName": attrs.get('mapName'),
            "gameMode": attrs.get('gameMode'),
            "duration": attrs.get('duration')
        }
        
    except Exception as e:
        return {"error": f"Exception: {str(e)}"}

def _is_after_time(self, match_time, lobby_start_time):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –º–∞—Ç—á –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ª–æ–±–±–∏"""
    try:
        from datetime import datetime
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –º–∞—Ç—á–∞ (ISO —Ñ–æ—Ä–º–∞—Ç)
        match_dt = datetime.fromisoformat(match_time.replace('Z', '+00:00'))
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ª–æ–±–±–∏
        if isinstance(lobby_start_time, str):
            lobby_dt = datetime.fromisoformat(lobby_start_time)
        else:
            lobby_dt = lobby_start_time
            
        result = match_dt > lobby_dt
        print(f"‚è∞ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: –º–∞—Ç—á {match_dt} > –ª–æ–±–±–∏ {lobby_dt} = {result}")
        return result
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return True  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å—Ä–∞–≤–Ω–∏—Ç—å - —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º
import requests
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ config
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from config.settings import PUBG_API_KEY

class PUBGAPIClient:
    def __init__(self):
        self.api_key = PUBG_API_KEY
        self.base_url = "https://api.pubg.com"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Accept": "application/vnd.api+json"
        }
    
    def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        print("üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∫–ª—é—á...")
        try:
            response = requests.get(f"{self.base_url}/status", headers=self.headers)
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                print("‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
                print("üìà –õ–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É = 14,400/–¥–µ–Ω—å")
                print("üí° –≠—Ç–æ–≥–æ —Ö–≤–∞—Ç–∏—Ç –Ω–∞ —Ç—ã—Å—è—á–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def explore_api_endpoints(self):
        """–ò–∑—É—á–∞–µ–º —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ PUBG API"""
        print("\nüîç –ò–∑—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ —Ä–µ–≥–∏–æ–Ω—ã...")
        
        platforms = ['steam', 'xbox', 'psn', 'kakao', 'stadia', 'tournament']
        
        for platform in platforms:
            try:
                url = f"{self.base_url}/shards/{platform}/players"
                response = requests.get(url, headers=self.headers, params={'filter[playerNames]': 'test'})
                print(f"üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ {platform}: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
                if response.status_code == 404:
                    print(f"   ‚ùå {platform} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                elif response.status_code == 400:
                    print(f"   ‚úÖ {platform} –¥–æ—Å—Ç—É–ø–Ω–∞ (–ø–ª–æ—Ö–æ–π –∑–∞–ø—Ä–æ—Å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                elif response.status_code == 200:
                    print(f"   ‚úÖ {platform} –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–Ω–∞")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {platform}: {e}")

    def check_tournament_platform(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É"""
        print("\nüèÜ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É...")
        
        try:
            url = f"{self.base_url}/tournaments"
            response = requests.get(url, headers=self.headers)
            print(f"üìä –¢—É—Ä–Ω–∏—Ä—ã: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã!")
                print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {list(data.keys())}")
            elif response.status_code == 404:
                print("‚ùå –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.text[:200]}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def explore_tournament_data(self):
            """–ò–∑—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
            print("\nüìã –ò–∑—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä–æ–±–Ω–æ...")
            
            try:
                url = f"{self.base_url}/tournaments"
                response = requests.get(url, headers=self.headers)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {len(data.get('data', []))}")
                    
                    if data.get('data'):
                        # –°–º–æ—Ç—Ä–∏–º –ø–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä
                        first_tournament = data['data'][0]
                        print(f"üèÜ –ü–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä:")
                        print(f"   ID: {first_tournament.get('id')}")
                        print(f"   –¢–∏–ø: {first_tournament.get('type')}")
                        
                        # –°–º–æ—Ç—Ä–∏–º –∞—Ç—Ä–∏–±—É—Ç—ã
                        attrs = first_tournament.get('attributes', {})
                        print(f"   üìã –ê—Ç—Ä–∏–±—É—Ç—ã: {list(attrs.keys())}")
                        
                        # –ò—â–µ–º –∏–≥—Ä—É
                        if 'gameMode' in attrs:
                            print(f"   üéÆ –†–µ–∂–∏–º –∏–≥—Ä—ã: {attrs['gameMode']}")
                        
                        # –°–º–æ—Ç—Ä–∏–º —Å–≤—è–∑–∏
                        relationships = first_tournament.get('relationships', {})
                        print(f"   üîó –°–≤—è–∑–∏: {list(relationships.keys())}")
                        
                    else:
                        print("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    client = PUBGAPIClient()
    if client.test_connection():
        client.explore_api_endpoints()
        client.check_tournament_platform()
        client.explore_tournament_data()